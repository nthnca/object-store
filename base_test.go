// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_objectstore is a generated GoMock package.
package objectstore

import (
	"bytes"
	context "context"
	"fmt"
	"log"
	reflect "reflect"
	"testing"

	"cloud.google.com/go/storage"
	gomock "github.com/golang/mock/gomock"
	"google.golang.org/api/iterator"
)

// MockstorageClientInterface is a mock of storageClientInterface interface
type MockstorageClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockstorageClientInterfaceMockRecorder
}

// MockstorageClientInterfaceMockRecorder is the mock recorder for MockstorageClientInterface
type MockstorageClientInterfaceMockRecorder struct {
	mock *MockstorageClientInterface
}

// NewMockstorageClientInterface creates a new mock instance
func NewMockstorageClientInterface(ctrl *gomock.Controller) *MockstorageClientInterface {
	mock := &MockstorageClientInterface{ctrl: ctrl}
	mock.recorder = &MockstorageClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockstorageClientInterface) EXPECT() *MockstorageClientInterfaceMockRecorder {
	return m.recorder
}

// list mocks base method
func (m *MockstorageClientInterface) list(ctx context.Context) storageListInterface {
	ret := m.ctrl.Call(m, "list", ctx)
	ret0, _ := ret[0].(storageListInterface)
	return ret0
}

// list indicates an expected call of list
func (mr *MockstorageClientInterfaceMockRecorder) list(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "list", reflect.TypeOf((*MockstorageClientInterface)(nil).list), ctx)
}

// readFile mocks base method
func (m *MockstorageClientInterface) readFile(ctx context.Context, filename string) ([]byte, error) {
	ret := m.ctrl.Call(m, "readFile", ctx, filename)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// readFile indicates an expected call of readFile
func (mr *MockstorageClientInterfaceMockRecorder) readFile(ctx, filename interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "readFile", reflect.TypeOf((*MockstorageClientInterface)(nil).readFile), ctx, filename)
}

// writeFile mocks base method
func (m *MockstorageClientInterface) writeFile(ctx context.Context, filename string, contents []byte) error {
	ret := m.ctrl.Call(m, "writeFile", ctx, filename, contents)
	ret0, _ := ret[0].(error)
	return ret0
}

// writeFile indicates an expected call of writeFile
func (mr *MockstorageClientInterfaceMockRecorder) writeFile(ctx, filename, contents interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "writeFile", reflect.TypeOf((*MockstorageClientInterface)(nil).writeFile), ctx, filename, contents)
}

// deleteFile mocks base method
func (m *MockstorageClientInterface) deleteFile(ctx context.Context, filename string) error {
	ret := m.ctrl.Call(m, "deleteFile", ctx, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteFile indicates an expected call of deleteFile
func (mr *MockstorageClientInterfaceMockRecorder) deleteFile(ctx, filename interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteFile", reflect.TypeOf((*MockstorageClientInterface)(nil).deleteFile), ctx, filename)
}

// MockstorageListInterface is a mock of storageListInterface interface
type MockstorageListInterface struct {
	ctrl     *gomock.Controller
	recorder *MockstorageListInterfaceMockRecorder
}

// MockstorageListInterfaceMockRecorder is the mock recorder for MockstorageListInterface
type MockstorageListInterfaceMockRecorder struct {
	mock *MockstorageListInterface
}

// NewMockstorageListInterface creates a new mock instance
func NewMockstorageListInterface(ctrl *gomock.Controller) *MockstorageListInterface {
	mock := &MockstorageListInterface{ctrl: ctrl}
	mock.recorder = &MockstorageListInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockstorageListInterface) EXPECT() *MockstorageListInterfaceMockRecorder {
	return m.recorder
}

// next mocks base method
func (m *MockstorageListInterface) next() (string, error) {
	ret := m.ctrl.Call(m, "next")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// next indicates an expected call of next
func (mr *MockstorageListInterfaceMockRecorder) next() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "next", reflect.TypeOf((*MockstorageListInterface)(nil).next))
}

func ExpectErrNil(err error) {
	if err != nil {
		log.Fatalf("Expected error to be nil: %v", err)
	}
}

func ExpectErrPrefix(err error, prefix string) {
	if err == nil {
		log.Fatalf("Expected error")
	}
	if len(err.Error()) < len(prefix) || err.Error()[:len(prefix)] != prefix {
		log.Fatalf("Unexpected error: %v", err)
	}
}

func ExpectOSNil(os *ObjectStore) {
	if os != nil {
		log.Fatalf("Expected ObjectStore object to be nil")
	}
}

func ExpectSizeAndFiles(os *ObjectStore, size int, files []string) {
	if len(os.data.Item) != size {
		log.Fatalf("Expected ObjectStore data len of %d is %d", size, len(os.data.Item))
	}
	if len(os.files) != len(files) {
		log.Fatalf("Expected ObjectStore files %v is %v", files, os.files)
	}
	for i := range files {
		if files[i] != os.files[i] {
			log.Fatalf("Expected ObjectStore files %v is %v", files, os.files)
		}
	}
}

type baseFunc func()

func TestErrors(t *testing.T) {
	mockClient := NewMockstorageClientInterface(nil)
	mockList := NewMockstorageListInterface(nil)

	origMaxFiles := maxFiles
	defer func() { maxFiles = origMaxFiles }()

	origUnixNano := unixNano
	defer func() { unixNano = origUnixNano }()

	maxFiles = 3

	curr := int64(1)
	unixNano = func() int64 {
		curr += 1
		return curr
	}

	byte1 := []byte{10, 8, 10, 1, 107, 16, 2, 26, 1, 97}

	tests := []func(){
		func() {
			log.Printf("Success")

			mockList.EXPECT().next().Return("", iterator.Done)

			os, err := internal_new(nil, mockClient)
			ExpectSizeAndFiles(os, 0, nil)
			ExpectErrNil(err)
		},
		func() {
			log.Printf("Success - 4 objects")

			mockList.EXPECT().next().Return("obj1", nil)
			mockList.EXPECT().next().Return("obj1", nil)
			mockList.EXPECT().next().Return("obj1", nil)
			mockList.EXPECT().next().Return("obj1", nil)
			mockList.EXPECT().next().Return("", iterator.Done)

			os, err := internal_new(nil, mockClient)
			ExpectSizeAndFiles(os, 1, []string{"obj1", "obj1", "obj1", "obj1"})
			ExpectErrNil(err)

			b := os.Get("k")
			if bytes.Compare(b, []byte("a")) != 0 {
				log.Fatalf("Expected equality: %v", b)
			}
		},
		func() {
			log.Printf("Success - with master")

			mockList.EXPECT().next().Return("obj1", nil)
			mockList.EXPECT().next().Return("obj1", nil)
			mockList.EXPECT().next().Return("obj1", nil)
			mockList.EXPECT().next().Return("master.md", nil)
			mockList.EXPECT().next().Return("", iterator.Done)
			mockClient.EXPECT().readFile(nil, "master.md").Return(byte1, nil)

			os, err := internal_new(nil, mockClient)
			ExpectSizeAndFiles(os, 1, []string{"obj1", "obj1", "obj1"})
			ExpectErrNil(err)

			b := os.Get("k")
			if bytes.Compare(b, []byte("a")) != 0 {
				log.Fatalf("Expected equality: %v", b)
			}
		},
		func() {
			log.Printf("List Error")

			mockList.EXPECT().next().Return("", fmt.Errorf("Sorry"))

			os, err := internal_new(nil, mockClient)
			ExpectOSNil(os)
			ExpectErrPrefix(err, "Failed to iterate through objects: ")
		},
		func() {
			log.Printf("List Error Oops")

			mockList.EXPECT().next().Return("obj1", nil)
			mockList.EXPECT().next().Return("", fmt.Errorf("Sorry"))

			os, err := internal_new(nil, mockClient)
			ExpectOSNil(os)
			ExpectErrPrefix(err, "Failed to iterate through objects: ")
		},
		func() {
			log.Printf("Parse error")

			mockList.EXPECT().next().Return("abc", nil)
			mockList.EXPECT().next().Return("", iterator.Done)
			mockClient.EXPECT().readFile(nil, "abc").
				Return([]byte("not a proto"), nil)

			os, err := internal_new(nil, mockClient)
			ExpectOSNil(os)
			ExpectErrPrefix(err, "unmarshalling proto: ")
		},
		func() {
			log.Printf("Read error - break")

			mockList.EXPECT().next().Return("abc", nil)
			mockList.EXPECT().next().Return("obj1", nil).AnyTimes()
			mockClient.EXPECT().readFile(nil, "abc").
				Return(nil, fmt.Errorf("Sorry"))

			os, err := internal_new(nil, mockClient)
			ExpectOSNil(os)
			ExpectErrPrefix(err, "Reading file: ")
		},
		func() {
			log.Printf("Read Error - only")

			mockList.EXPECT().next().Return("abc", nil)
			mockList.EXPECT().next().Return("", iterator.Done)
			mockClient.EXPECT().readFile(nil, "abc").
				Return(nil, fmt.Errorf("Sorry"))

			os, err := internal_new(nil, mockClient)
			ExpectOSNil(os)
			ExpectErrPrefix(err, "Reading file: ")
		},
		func() {
			log.Printf("Read File Not Found")

			mockList.EXPECT().next().Return("abc", nil)
			mockList.EXPECT().next().Return("", iterator.Done)
			mockClient.EXPECT().readFile(nil, "abc").
				Return(nil, storage.ErrObjectNotExist)

			os, err := internal_new(nil, mockClient)
			ExpectOSNil(os)
			if err != storage.ErrObjectNotExist {
				log.Fatalf("Unexpected error: %v", err)
			}
		},
		func() {
			log.Printf("Insert - Write failure")

			mockList.EXPECT().next().Return("", iterator.Done)
			mockClient.EXPECT().writeFile(nil,
				"3a08adf873974f4578dfc4be2d1ac4cc04b6e9e7db78aa8761c309189c35c721.os",
				[]byte{10, 8, 10, 1, 107, 16, 2, 26, 1, 97}).Return(fmt.Errorf("Sorry"))

			os, err := internal_new(nil, mockClient)
			err = os.Insert(nil, "k", []byte("a"))
			ExpectErrPrefix(err, "Failed to write: ")
		},
		func() {
			log.Printf("Insert - Success")

			mockList.EXPECT().next().Return("", iterator.Done)
			mockClient.EXPECT().writeFile(nil,
				"3a08adf873974f4578dfc4be2d1ac4cc04b6e9e7db78aa8761c309189c35c721.os",
				[]byte{10, 8, 10, 1, 107, 16, 2, 26, 1, 97}).Return(nil)

			os, err := internal_new(nil, mockClient)
			err = os.Insert(nil, "k", []byte("a"))
			if err != nil {
				log.Fatalf("Expected success: %v", err)
			}
		},
		func() {
			log.Printf("Get - Success")

			mockList.EXPECT().next().Return("", iterator.Done)
			mockClient.EXPECT().writeFile(nil,
				"3a08adf873974f4578dfc4be2d1ac4cc04b6e9e7db78aa8761c309189c35c721.os",
				[]byte{10, 8, 10, 1, 107, 16, 2, 26, 1, 97}).Return(nil)

			os, err := internal_new(nil, mockClient)
			err = os.Insert(nil, "k", []byte("a"))
			if err != nil {
				log.Fatalf("Expected success: %v", err)
			}
			b := os.Get("k")
			if bytes.Compare(b, []byte("a")) != 0 {
				log.Fatalf("Expected equality: %v", b)
			}
		},
		func() {
			log.Printf("Get - Success")

			mockList.EXPECT().next().Return("", iterator.Done)
			mockClient.EXPECT().writeFile(nil,
				"3a08adf873974f4578dfc4be2d1ac4cc04b6e9e7db78aa8761c309189c35c721.os",
				[]byte{10, 8, 10, 1, 107, 16, 2, 26, 1, 97}).Return(nil)

			os, err := internal_new(nil, mockClient)
			err = os.Insert(nil, "k", []byte("a"))
			if err != nil {
				log.Fatalf("Expected success: %v", err)
			}
			b := os.Get("k")
			if bytes.Compare(b, []byte("a")) != 0 {
				log.Fatalf("Expected equality: %v", b)
			}
		},
	}

	for _, f := range tests {
		mockCtrl := gomock.NewController(t)
		defer mockCtrl.Finish()

		mockClient = NewMockstorageClientInterface(mockCtrl)
		mockList = NewMockstorageListInterface(mockCtrl)
		curr = 1

		// Standard Expectations
		mockClient.EXPECT().list(nil).Return(mockList).AnyTimes()
		mockClient.EXPECT().readFile(nil, "obj1").Return(byte1, nil).AnyTimes()

		f()
	}
}
